{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Navbar","lazy","DatosMundiales","DatosCountry","DatosRegionesPeru","Footer","App","fallback","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0NASMA,EAASC,gBAAK,kBAAM,gCACpBC,EAAiBD,gBAAK,kBAAM,sDAC5BE,EAAeF,gBAAK,kBAAM,sDAC1BG,EAAoBH,gBAAK,kBAAM,gCAC/BI,EAASJ,gBAAK,kBAAM,gCAgCXK,MA9Bf,WAEE,OACE,kBAAC,IAAD,KAEE,kBAAC,WAAD,CAAUC,SAAU,sDAElB,kBAACP,EAAD,MAEA,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,KAChB,kBAACP,EAAD,MACA,kBAACC,EAAD,MACA,kBAACC,EAAD,MACA,kBAACC,EAAD,OAGF,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,kBAAkBC,UAAWR,IAC/C,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,gBAAgBC,UAAWP,IAC7C,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,qBAAqBC,UAAWN,Q,MCvBxCO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/index.main.cb7e80d1.production.chunk.min.js","sourcesContent":["import React, { Suspense, lazy } from 'react';\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  Redirect,\n  HashRouter\n} from \"react-router-dom\";\n\nconst Navbar = lazy(() => import('./components/Navbar'));\nconst DatosMundiales = lazy(() => import('./components/DatosMundiales'));\nconst DatosCountry = lazy(() => import('./components/DatosCountry'));\nconst DatosRegionesPeru = lazy(() => import('./components/DatosRegionesPeru'));\nconst Footer = lazy(() => import('./components/Footer'));\n\nfunction App (){\n  \n  return (\n    <HashRouter>\n\n      <Suspense fallback={<div>Pantalla de Carga...</div>}>\n\n        <Navbar />\n\n        <Switch>\n\n          <Route exact path=\"/\">\n            <DatosMundiales />\n            <DatosCountry />\n            <DatosRegionesPeru />\n            <Footer />\n          </Route>\n\n          <Route exact path=\"/DatosMundiales\" component={DatosMundiales}/>\n          <Route exact path=\"/DatosCountry\" component={DatosCountry}/>\n          <Route exact path=\"/DatosRegionesPeru\" component={DatosRegionesPeru}/>\n\n        </Switch>\n\n      </Suspense>\n\n    </HashRouter>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (/*process.env.NODE_ENV === 'production' && */'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  console.log(\"check\")\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      console.log(\"check1\")\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        console.log(\"no servicio worker enocntrado\")\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        console.log(\"o check\")\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n//console.time('TIME index.js');\nReactDOM.render(<App />, document.getElementById('root'));\n//console.timeEnd('TIME index.js');\nserviceWorker.unregister();"],"sourceRoot":""}