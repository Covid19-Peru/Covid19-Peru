{"version":3,"sources":["assets/img/covid_19.svg","components/PantallaDeCarga.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PantallaDeCarga","className","src","Imagen_De_Carga","Header","lazy","Footer","DatosMundiales","DatosCountry","DatosRegionesPeru","AcercaDeLosDesarrolladores","ComoHicimosLaPagina","PrevenirElCovid19","App","delayMs","fallback","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","createRoot","document","getElementById","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,sC,sJCa5BC,MAVf,WACI,OACI,yBAAKC,UAAU,WACX,6BACI,yBAAKC,IAAKC,MACV,+C,uBCHVC,EAASC,gBAAK,kBAAM,gCACpBC,EAASD,gBAAK,kBAAM,iCACpBE,EAAiBF,gBAAK,kBAAM,sDAC5BG,EAAeH,gBAAK,kBAAM,uDAC1BI,EAAoBJ,gBAAK,kBAAM,gCAC/BK,EAA6BL,gBAAK,kBAAM,gCACxCM,EAAsBN,gBAAK,kBAAM,gCACjCO,EAAoBP,gBAAK,kBAAM,gCA0BtBQ,MAxBf,WAEE,OACE,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,QAAS,IAAMC,SAAU,kBAAC,EAAD,OACjC,kBAACX,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUW,SAAU,yCAClB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAACV,EAAD,MACA,kBAACC,EAAD,MACA,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOQ,KAAK,SAASC,UAAWR,IAChC,kBAAC,IAAD,CAAOO,KAAK,gBAAgBC,UAAWP,IACvC,kBAAC,IAAD,CAAOM,KAAK,cAAcC,UAAWN,MAGzC,kBAACN,EAAD,S,MCpBYa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,WAAWC,SAASC,eAAe,SAASC,OAAO,kBAAC,EAAD,OD8HtD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/index.main.f6803283.production.chunk.min.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/covid_19.d7afa43e.svg\";","import React from 'react';\nimport Imagen_De_Carga from '../assets/img/covid_19.svg'\n\nfunction PantallaDeCarga() {\n    return (\n        <div className=\"Loading\">\n            <div>\n                <img src={Imagen_De_Carga}></img>\n                <h1>Cargando ...</h1>\n            </div>\n        </div>\n    )\n}\nexport default PantallaDeCarga","import React, { Suspense, lazy } from 'react';\nimport PantallaDeCarga from './components/PantallaDeCarga'\nimport './Loading.css'\nimport {BrowserRouter,Switch,Route,Redirect,HashRouter} from \"react-router-dom\";\n//const Navbar = lazy(() => import('./components/Navbar'));\nconst Header = lazy(() => import('./components/Header'));\nconst Footer = lazy(() => import('./components/Footer'));\nconst DatosMundiales = lazy(() => import('./components/DatosMundiales'));\nconst DatosCountry = lazy(() => import('./components/DatosCountry'));\nconst DatosRegionesPeru = lazy(() => import('./components/DatosRegionesPeru'));\nconst AcercaDeLosDesarrolladores = lazy(() => import('./components/informacion/AcercaDeLosDesarrolladores'));\nconst ComoHicimosLaPagina = lazy(() => import('./components/informacion/ComoHicimosLaPagina'));\nconst PrevenirElCovid19 = lazy(() => import('./components/informacion/PrevenirElCovid19'));\n\nfunction App (){\n  \n  return (\n    <HashRouter>\n      <Suspense delayMs={3000} fallback={<PantallaDeCarga />}>\n        <Header />\n        <Switch>\n          <Suspense fallback={<div>holaaaa</div>}>\n            <Route exact path=\"/\">\n              <DatosMundiales />\n              <DatosCountry />\n              <DatosRegionesPeru />\n            </Route>\n            <Route path=\"/about\" component={AcercaDeLosDesarrolladores}/>\n            <Route path=\"/coide-source\" component={ComoHicimosLaPagina}/>\n            <Route path=\"/prevencion\" component={PrevenirElCovid19}/>\n          </Suspense>\n        </Switch>\n        <Footer />\n      </Suspense>\n    </HashRouter>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (/*process.env.NODE_ENV === 'production' && */'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  console.log(\"check\")\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      console.log(\"check1\")\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        console.log(\"no servicio worker enocntrado\")\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        console.log(\"o check\")\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n//Modo Normal REACT:\n//ReactDOM.render(<App />, document.getElementById('root'));\n//Modo Experimental REACT:\nReactDOM.createRoot(document.getElementById('root')).render(<App />);\nserviceWorker.unregister();"],"sourceRoot":""}